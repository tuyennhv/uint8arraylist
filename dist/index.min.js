"use strict";(function (root, factory) {(typeof module === 'object' && module.exports) ? module.exports = factory() : root.Uint8Arraylist = factory()}(typeof self !== 'undefined' ? self : this, function () {
var Uint8Arraylist=(()=>{var w=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var V=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var v=(r,t)=>{for(var n in t)w(r,n,{get:t[n],enumerable:!0})},A=(r,t,n,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of V(t))!m.call(r,s)&&s!==n&&w(r,s,{get:()=>t[s],enumerable:!(e=D(t,s))||e.enumerable});return r};var O=r=>A(w({},"__esModule",{value:!0}),r);var d={};v(d,{Uint8ArrayList:()=>a,isUint8ArrayList:()=>b});function p(r,t){if(r===t)return!0;if(r.byteLength!==t.byteLength)return!1;for(let n=0;n<r.byteLength;n++)if(r[n]!==t[n])return!1;return!0}function i(r=0){return globalThis.Buffer!=null&&globalThis.Buffer.alloc!=null?globalThis.Buffer.alloc(r):new Uint8Array(r)}function l(r=0){return globalThis.Buffer!=null&&globalThis.Buffer.allocUnsafe!=null?globalThis.Buffer.allocUnsafe(r):new Uint8Array(r)}var B=Symbol.for("@achingbrain/uint8arraylist");function U(r,t){if(t==null||t<0)throw new RangeError("index is out of bounds");let n=0;for(let e of r){let s=n+e.byteLength;if(t<s)return{buf:e,index:t-n};n=s}throw new RangeError("index is out of bounds")}function b(r){return Boolean(r?.[B])}var a=class{constructor(...t){Object.defineProperty(this,B,{value:!0}),this.bufs=[],this.length=0,t.length>0&&this.appendAll(t)}*[Symbol.iterator](){yield*this.bufs}get byteLength(){return this.length}append(...t){this.appendAll(t)}appendAll(t){let n=0;for(let e of t)if(e instanceof Uint8Array)n+=e.byteLength,this.bufs.push(g(e));else if(b(e))n+=e.byteLength,this.bufs.push(...e.bufs);else throw new Error("Could not append value, must be an Uint8Array or a Uint8ArrayList");this.length+=n}prepend(...t){this.prependAll(t)}prependAll(t){let n=0;for(let e of t.reverse())if(e instanceof Uint8Array)n+=e.byteLength,this.bufs.unshift(g(e));else if(b(e))n+=e.byteLength,this.bufs.unshift(...e.bufs);else throw new Error("Could not prepend value, must be an Uint8Array or a Uint8ArrayList");this.length+=n}get(t){let n=U(this.bufs,t);return n.buf[n.index]}set(t,n){let e=U(this.bufs,t);e.buf[e.index]=n}write(t,n=0){if(t instanceof Uint8Array)for(let e=0;e<t.length;e++)this.set(n+e,t[e]);else if(b(t))for(let e=0;e<t.length;e++)this.set(n+e,t.get(e));else throw new Error("Could not write value, must be an Uint8Array or a Uint8ArrayList")}consume(t){if(t=Math.trunc(t),!(Number.isNaN(t)||t<=0))for(;this.bufs.length>0;)if(t>=this.bufs[0].byteLength)t-=this.bufs[0].byteLength,this.length-=this.bufs[0].byteLength,this.bufs.shift();else{this.bufs[0]=this.bufs[0].subarray(t),this.length-=t;break}}slice(t,n){let{bufs:e,length:s}=this._subList(t,n);return e.length===1?e[0]:Buffer.concat(e,s)}subarray(t,n){let{bufs:e,length:s}=this._subList(t,n);return e.length===1?e[0]:Buffer.concat(e,s)}sublist(t,n){let{bufs:e,length:s}=this._subList(t,n),f=new a;return f.length=s,f.bufs=e,f}_subList(t,n){if(t=t??0,n=n??this.length,t<0&&(t=this.length+t),n<0&&(n=this.length+n),t<0||n>this.length)throw new RangeError("index is out of bounds");if(t===n)return{bufs:[],length:0};if(t===0&&n===this.length)return{bufs:[...this.bufs],length:this.length};let e=[],s=0;for(let f=0;f<this.bufs.length;f++){let u=this.bufs[f],o=s,h=o+u.byteLength;if(s=h,t>=h)continue;let y=t>=o&&t<h,c=n>o&&n<=h;if(y&&c){if(t===o&&n===h){e.push(u);break}let L=t-o;e.push(u.subarray(L,L+(n-t)));break}if(y){if(t===0){e.push(u);continue}e.push(u.subarray(t-o));continue}if(c){if(n===h){e.push(u);break}e.push(u.subarray(0,n-o));break}e.push(u)}return{bufs:e,length:n-t}}getInt8(t){let n=this.subarray(t,t+1);return new DataView(n.buffer,n.byteOffset,n.byteLength).getInt8(0)}setInt8(t,n){let e=l(1);new DataView(e.buffer,e.byteOffset,e.byteLength).setInt8(0,n),this.write(e,t)}getInt16(t,n){let e=this.subarray(t,t+2);return new DataView(e.buffer,e.byteOffset,e.byteLength).getInt16(0,n)}setInt16(t,n,e){let s=i(2);new DataView(s.buffer,s.byteOffset,s.byteLength).setInt16(0,n,e),this.write(s,t)}getInt32(t,n){let e=this.subarray(t,t+4);return new DataView(e.buffer,e.byteOffset,e.byteLength).getInt32(0,n)}setInt32(t,n,e){let s=i(4);new DataView(s.buffer,s.byteOffset,s.byteLength).setInt32(0,n,e),this.write(s,t)}getBigInt64(t,n){let e=this.subarray(t,t+8);return new DataView(e.buffer,e.byteOffset,e.byteLength).getBigInt64(0,n)}setBigInt64(t,n,e){let s=i(8);new DataView(s.buffer,s.byteOffset,s.byteLength).setBigInt64(0,n,e),this.write(s,t)}getUint8(t){let n=this.subarray(t,t+1);return new DataView(n.buffer,n.byteOffset,n.byteLength).getUint8(0)}setUint8(t,n){let e=l(1);new DataView(e.buffer,e.byteOffset,e.byteLength).setUint8(0,n),this.write(e,t)}getUint16(t,n){let e=this.subarray(t,t+2);return new DataView(e.buffer,e.byteOffset,e.byteLength).getUint16(0,n)}setUint16(t,n,e){let s=i(2);new DataView(s.buffer,s.byteOffset,s.byteLength).setUint16(0,n,e),this.write(s,t)}getUint32(t,n){let e=this.subarray(t,t+4);return new DataView(e.buffer,e.byteOffset,e.byteLength).getUint32(0,n)}setUint32(t,n,e){let s=i(4);new DataView(s.buffer,s.byteOffset,s.byteLength).setUint32(0,n,e),this.write(s,t)}getBigUint64(t,n){let e=this.subarray(t,t+8);return new DataView(e.buffer,e.byteOffset,e.byteLength).getBigUint64(0,n)}setBigUint64(t,n,e){let s=i(8);new DataView(s.buffer,s.byteOffset,s.byteLength).setBigUint64(0,n,e),this.write(s,t)}getFloat32(t,n){let e=this.subarray(t,t+4);return new DataView(e.buffer,e.byteOffset,e.byteLength).getFloat32(0,n)}setFloat32(t,n,e){let s=i(4);new DataView(s.buffer,s.byteOffset,s.byteLength).setFloat32(0,n,e),this.write(s,t)}getFloat64(t,n){let e=this.subarray(t,t+8);return new DataView(e.buffer,e.byteOffset,e.byteLength).getFloat64(0,n)}setFloat64(t,n,e){let s=i(8);new DataView(s.buffer,s.byteOffset,s.byteLength).setFloat64(0,n,e),this.write(s,t)}equals(t){if(t==null||!(t instanceof a)||t.bufs.length!==this.bufs.length)return!1;for(let n=0;n<this.bufs.length;n++)if(!p(this.bufs[n],t.bufs[n]))return!1;return!0}static fromUint8Arrays(t,n){let e=new a;return e.bufs=t.map(g),n==null&&(n=t.reduce((s,f)=>s+f.byteLength,0)),e.length=n,e}};function g(r){return r instanceof Buffer?r:Buffer.from(r.buffer,r.byteOffset,r.byteLength)}return O(d);})();
return Uint8Arraylist}));
